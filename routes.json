{
  "admin": "Route::get('comment', 'CommentController@list')->middleware(['permissions:CommentList']);    //评价列表\n            Route::post('comment', 'CommentController@create')->middleware(['permissions:CommentCreate']);    //评价回复\n            Route::post('comment/{state}', 'CommentController@edit')->middleware(['permissions:CommentEdit']);    //评价操作\n            Route::post('comment/destroy/{id}', 'CommentController@destroy')->middleware(['permissions:CommentDestroy']);    //评价删除",
  "permission": "Comment: () => import('@/views/ToolManagement/Comment/index'),\n  CommentList: () => import('@/views/ToolManagement/Comment/list'),",
  "app": "Route::get('comment/detail/{id}', 'CommentController@detail');    //获取需要评价的商品列表\n            Route::post('comment/{id}', 'CommentController@create');    //评价",
  "notValidatedApp": "Route::get('comment/good', 'CommentController@good');    //获取商品评价列表",
  "uniApp": ",{\n\t\t\t\"path\": \"pages/order/score\",\n\t\t\t\"style\": {\n\t\t\t\t\"navigationBarTitleText\": \"评价\",\n\t\t\t\t\"app-plus\": {\n\t\t\t\t\t\"bounce\": \"none\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t, {\n\t\t\t\"path\": \"pages/product/comment\",\n\t\t\t\"style\": {\n\t\t\t\t\"navigationBarTitleText\": \"评价列表\",\n\t\t\t\t\"enablePullDownRefresh\": true,\n\t\t\t\t\"onReachBottomDistance\": 50\n\t\t\t}\n\t\t}",
  "wechatChannel": "/**\n     *  订单评价提醒\n     * @param $notifiable\n     * @param $message\n     * @throws \\EasyWeChat\\Kernel\\Exceptions\\InvalidArgumentException\n     * @throws \\EasyWeChat\\Kernel\\Exceptions\\InvalidConfigException\n     * @throws \\GuzzleHttp\\Exception\\GuzzleException\n     */\n    protected function orderEvaluate($notifiable, $message)\n    {\n        $data = [\n            'template_id' => $this->information[$message['template']],\n            'touser' => $notifiable->wechat,\n            'data' => [\n                'first' => '待评价提醒',\n                'keyword1' => $message['identification'],\n                'keyword2' => $message['confirm_time'],\n                'remark' => '点击详情,您可以对订单进行评价',\n            ],\n        ];\n        if ($this->miniweixin) {\n            $data['miniprogram'] = [\n                'appid' => $this->miniweixin,\n                'pagepath' => '/pages/order/score?id=' . $message['id'],\n            ];\n        } else {\n            $data['url'] = request()->root() . '/h5/#/pages/order/score?id=' . $message['id'];\n        }\n        //发送记录\n        $send = $this->app->template_message->send($data);\n        $NotificationLog = new NotificationLog();\n        $NotificationLog->user_id = $message['user_id'];\n        $NotificationLog->type = NotificationLog::NOTIFICATION_LOG_TYPE_WECHAT;\n        $NotificationLog->msg = json_encode($data);\n        $NotificationLog->feedback = json_encode($send);\n        $NotificationLog->state = $send['errcode'] == 0 ? NotificationLog::NOTIFICATION_LOG_STATE_OK : NotificationLog::NOTIFICATION_LOG_STATE_ERROR;\n        $NotificationLog->save();\n    }\n\n    /**\n     * 用户评价通知\n     * @param $notifiable\n     * @param $message\n     * @throws \\EasyWeChat\\Kernel\\Exceptions\\InvalidArgumentException\n     * @throws \\EasyWeChat\\Kernel\\Exceptions\\InvalidConfigException\n     * @throws \\GuzzleHttp\\Exception\\GuzzleException\n     */\n    protected function adminOrderEvaluate($notifiable, $message)\n    {\n        $data = [\n            'template_id' => $this->information[$message['template']],\n            'touser' => $notifiable->wechat,\n            'data' => [\n                'first' => '收到新的评价消息',\n                'keyword1' => $message['cellphone'],\n                'keyword2' => $message['details'],\n                'keyword3' => $message['time'],\n                'remark' => '点击查看详细信息',\n            ],\n        ];\n        $data['url'] = request()->root() . '/admin/#/tool/comment/commentList?model_id=' . $message['id'];\n        //发送记录\n        $send = $this->app->template_message->send($data);\n        $NotificationLog = new NotificationLog();\n        $NotificationLog->user_id = $message['user_id'];\n        $NotificationLog->type = NotificationLog::NOTIFICATION_LOG_TYPE_MINIWEIXIN;\n        $NotificationLog->msg = json_encode($data);\n        $NotificationLog->feedback = json_encode($send);\n        $NotificationLog->state = $send['errcode'] == 0 ? NotificationLog::NOTIFICATION_LOG_STATE_OK : NotificationLog::NOTIFICATION_LOG_STATE_ERROR;\n        $NotificationLog->save();\n    }",
  "observers": "\\App\\Models\\v1\\GoodIndent::observe(\\App\\Observers\\GoodIndent\\OrderRateNotificationObserver::class);\n        \\App\\Models\\v1\\Comment::observe(\\App\\Observers\\Comment\\UserEvaluateNotificationObserver::class);"
}
